/**
 *
 * @brief a macro that can print values and their names.(header-only)
 * @file dbg_func
 * @author Simon_Chen
 * @copyright MIT License
 * @example demo.cpp
 * @remark github page:https://github.com/Simon-Chenzw/dbg_func
 *
 */

#ifndef open_dbg_func
#define open_dbg_func

#include <iomanip>
#include <iostream>
#include <list>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <tuple>
#include <utility>
#include <vector>
#include <forward_list>
#include <type_traits>
#include <unordered_map>
#include <unordered_set>

// macro
#define dbg(...) dbg_ns::pkg<decltype((__VA_ARGS__))>(__LINE__, #__VA_ARGS__).solve(__VA_ARGS__)
#define dbgrange(l, r) dbg_ns::make_range(l, r)
// TODO: when use dbg()

#ifndef DBG_LEN
#define DBG_LEN 20
#endif

namespace dbg_ns {

    enum class clr : int {
        reset = 0,
        black = 30,
        red = 31,
        green = 32,
        yellow = 33,
        blue = 34,
        magenta = 35,
        cyan = 36,
        white = 37,
        on_black = 40,
        on_red = 41,
        on_green = 42,
        on_yellow = 43,
        on_blue = 44,
        on_magenta = 45,
        on_cyan = 46,
        on_white = 47,
    };

#ifdef __unix__
    std::ostream& operator<<(std::ostream& os, const clr& color) {
        return os << "\033[" << static_cast<int>(color) << "m";
    }
#elif defined(_WIN32) || defined(WIN32)
    // #    define WIN32_LEAN_AND_MEAN    // Exclude rarely-used stuff from Windows headers
    // #    define NOMINMAX               // Fixes the conflicts with STL
    // #    include <Windows.h>
    std::ostream& operator<<(std::ostream& os, const clr& color) {
        // static const auto init = [] {
        //     // Set output mode to handle virtual terminal sequences
        //     HANDLE hOut = GetStdHandle(STD_OUTPUT_HANDLE);
        //     DWORD dwMode = 0;
        //     GetConsoleMode(hOut, &dwMode);
        //     SetConsoleMode(hOut, dwMode | ENABLE_VIRTUAL_TERMINAL_PROCESSING);
        //     return 0;
        // }();
        return os << "\033[" << static_cast<int>(color) << "m";
    }
#else
#pragma message("Unsupported platforms, cannot print out in color")
    std::ostream& operator<<(std::ostream& os, const clr& color) {
        return os;
    }
#endif

    template <typename _pointer, bool bracket = true>
    class range {
      public:
        _pointer l, r;    // l <= r; should support (++ != ==)

        range(const _pointer& _l, const _pointer& _r): l(_l), r(_r) {}

        friend std::ostream& operator<<(std::ostream& os, const range& rg) {
            if (bracket) os << '{';    // TODO: if constexpr (c++17)
            if (rg.l != rg.r) {
                os << *rg.l;
                _pointer it = std::next(rg.l);
                for (int cnt = 2; it != rg.r && cnt <= DBG_LEN; std::advance(it, 1), ++cnt) os << ',' << ' ' << *it;
                if (it != rg.r) os << ',' << ' ' << "...";
            }
            if (bracket) os << '}';    // TODO: if constexpr (c++17)
            return os;
        }
    };

    template <typename T1, typename T2>
    constexpr range<typename std::decay<T1>::type> make_range(T1 l, T2 r) {
        static_assert(std::is_same<typename std::decay<T1>::type, typename std::decay<T2>::type>::value,
                      "l and r are not the same type");
        // Need to check if l,r is a pointer or iterator?
        // static_assert(std::is_pointer<T1>::value, "must be pointer");
        // static_assert(is_iterator<T1>::value, "must be iterator");
        return range<typename std::decay<T1>::type>(l, r);
    }

    // pair
    template <typename T1, typename T2>
    std::ostream& operator<<(std::ostream& os, const std::pair<T1, T2>& pr) {
        os << '(' << pr.first << ',' << ' ' << pr.second << ')';
        return os;
    };

    // tuple
    template <size_t index = 0, typename... Args>
    typename std::enable_if<(index >= sizeof...(Args)), std::ostream&>::type operator<<(std::ostream& os,
                                                                                        const std::tuple<Args...>& t) {
        if (sizeof...(Args))    // TODO: if constexpr (c++17)
            return os << '}';
        else
            return os << '{' << '}';
    }

    template <size_t index = 0, typename... Args>
    typename std::enable_if<(index < sizeof...(Args)), std::ostream&>::type operator<<(std::ostream& os,
                                                                                       const std::tuple<Args...>& t) {
        if (index == 0) os << '{';    // TODO: if constexpr (c++17)
        os << std::get<index>(t);
        if (index + 1 != sizeof...(Args)) os << ',' << ' ';    // TODO: if constexpr (c++17)
        return operator<<<index + 1, Args...>(os, t);
    }

    // generate range
    template <typename T>
    inline auto rangeof(const T& container)
        -> decltype(range<decltype(std::begin(container))>(std::begin(container), std::end(container))) {
        return range<decltype(std::begin(container))>(std::begin(container), std::end(container));
    }

    // array
    template <typename T, std::size_t N>
    std::ostream& operator<<(std::ostream& os, const std::array<T, N>& container) {
        return os << rangeof(container);
    };

    // vector
    template <typename T>
    std::ostream& operator<<(std::ostream& os, const std::vector<T>& container) {
        return os << rangeof(container);
    };

    // deque
    template <typename T>
    std::ostream& operator<<(std::ostream& os, const std::deque<T>& container) {
        if (container.size() <= DBG_LEN) {
            return os << rangeof(container);
        }
        else {
            using range_type = range<decltype(container.begin()), false>;
            os << '{' << range_type(container.begin(), std::next(container.begin(), DBG_LEN / 2)) << ", ... , "
               << range_type(std::prev(container.end(), DBG_LEN / 2), container.end()) << '}';
            return os;
        }
    };

    // forward_list
    template <typename T>
    std::ostream& operator<<(std::ostream& os, const std::forward_list<T>& container) {
        return os << rangeof(container);
    };

    // list
    template <typename T>
    std::ostream& operator<<(std::ostream& os, const std::list<T>& container) {
        return os << rangeof(container);
    };

    // set
    template <typename T>
    std::ostream& operator<<(std::ostream& os, const std::set<T>& container) {
        return os << rangeof(container);
    };

    // map
    template <typename T1, typename T2>
    std::ostream& operator<<(std::ostream& os, const std::map<T1, T2>& container) {
        return os << rangeof(container);
    };

    // multiset
    template <typename T>
    std::ostream& operator<<(std::ostream& os, const std::multiset<T>& container) {
        return os << rangeof(container);
    };

    // multimap
    template <typename T1, typename T2>
    std::ostream& operator<<(std::ostream& os, const std::multimap<T1, T2>& container) {
        return os << rangeof(container);
    };

    // unordered_set
    template <typename T>
    std::ostream& operator<<(std::ostream& os, const std::unordered_set<T>& container) {
        return os << rangeof(container);
    };

    // unordered_map
    template <typename T1, typename T2>
    std::ostream& operator<<(std::ostream& os, const std::unordered_map<T1, T2>& container) {
        return os << rangeof(container);
    };

    // unordered_multiset
    template <typename T>
    std::ostream& operator<<(std::ostream& os, const std::unordered_multiset<T>& container) {
        return os << rangeof(container);
    };

    // unordered_multimap
    template <typename T1, typename T2>
    std::ostream& operator<<(std::ostream& os, const std::unordered_multimap<T1, T2>& container) {
        return os << rangeof(container);
    };

    template <typename container>
    const typename container::container_type& get_container(const container& a) {
        struct hack: container {
            static const typename container::container_type& get(const container& a) {
                return a.*(&hack::c);
            }
        };
        return hack::get(a);
    }

    // stack
    template <typename T>
    std::ostream& operator<<(std::ostream& os, const std::stack<T>& container) {
        if (container.size() <= DBG_LEN) {
            return os << get_container(container);
        }
        else {
            const auto& dp = get_container(container);    // default: deque
            os << "{ ... , " << range<decltype(dp.begin()), false>(std::prev(dp.end(), DBG_LEN), dp.end()) << '}';
            return os;
        }
    };

    // queue
    template <typename T>
    std::ostream& operator<<(std::ostream& os, const std::queue<T>& container) {
        return os << get_container(container);    // default: deque
    };

    // priority_queue
    template <typename T>
    std::ostream& operator<<(std::ostream& os, const std::priority_queue<T>& container) {
        // TODO: Low performance
        typename std::decay<decltype(container)>::type pq_copy(container);
        os << '{';
        if (!container.empty()) {
            os << pq_copy.top();
            pq_copy.pop();
            for (int cnt = 2; !pq_copy.empty() && cnt <= DBG_LEN; ++cnt) {
                os << ',' << ' ' << pq_copy.top();
                pq_copy.pop();
            }
            if (!pq_copy.empty()) os << ',' << ' ' << "...";
        }
        os << '}';
        return os;
    };

    class namesplit {
      public:
        const std::string str;
        std::string::const_iterator it;

        namesplit(const std::string& _str): str(_str), it(str.cbegin()) {}

        std::string get() {
            std::string ret;
            bool ischar = false;     // 在字符中
            bool isstr = false;      //在字符串中
            bool escape = false;     // 转义
            int parentheses = 0;     // 小括号
            int curlybracket = 0;    // 大括号
            // int bracket = 0;         // 中括号
            while (it != str.cend()) {
                if (ischar || isstr) {
                    if (!escape) {
                        if (ischar && *it == '\'') ischar = false;
                        if (isstr && *it == '"') isstr = false;
                    }
                    escape = (*it == '\\');
                }
                else {
                    if (*it == ',' && !parentheses && !curlybracket) {
                        ++it;
                        break;
                    }
                    if (*it == '(') parentheses++;
                    if (*it == ')') parentheses--;
                    if (*it == '{') curlybracket++;
                    if (*it == '}') curlybracket--;
                    if (*it == '\'') ischar = true;
                    if (*it == '"') isstr = true;
                }

                if (*it != ' ') ret.push_back(*it);
                ++it;
            }
            return ret;
        }
    };

    class valpr {
      public:
        std::string name, value;

        valpr(const std::string& _name, const std::string& _value): name(_name), value(_value) {}

        friend std::ostream& operator<<(std::ostream& os, const valpr& pr) {
            if (!pr.name.empty())
                os << clr::cyan << pr.name << clr::reset << " = " << pr.value;
            else
                os << clr::green << pr.value << clr::reset;
            return os;
        }
    };

    class console {
      public:
        int line;
        namesplit names;
        std::vector<valpr> vals;

        console(const int& _line, const std::string& _namestr): line(_line), names(_namestr) {}

        template <typename T>
        console& operator<<(T a) {
            std::ostringstream ss;
            ss << std::boolalpha << a;
            vals.emplace_back(names.get(), ss.str());
            return *this;
        }

        console& operator<<(const char& ch) {
            std::string str;
            str.push_back(ch);
            vals.emplace_back("", str);
            return *this;
        }

        template <typename T, std::size_t N>
        console& operator<<(const T (&arr)[N]) {
            std::ostringstream ss;
            ss << std::boolalpha << range<decltype(std::begin(arr))>(std::begin(arr), std::end(arr));
            vals.emplace_back(names.get(), ss.str());
            return *this;
        }

        template <std::size_t N>
        console& operator<<(const char (&str)[N]) {
            std::string name = names.get();
            if (name.front() == '"' && name.back() == '"')
                vals.emplace_back("", str);
            else
                vals.emplace_back(name, str);
            return *this;
        }

        friend std::ostream& operator<<(std::ostream& os, const console& con) {
            // TODO 自动匹配行宽 自动换行format
            os << "[" << std::setw(2) << std::setfill('0') << con.line << ']';
            for (const valpr& val : con.vals) os << "   " << val;
            os << std::endl;
            return os;
        }
    };

    template <typename Ret>
    class pkg {
      public:
        console con;
        pkg(int _line, const std::string& _namestr): con(_line, _namestr) {}

        template <typename T>
        Ret solve(T&& a) {
            con << a;
            std::cerr << con;
            return a;
        }

        template <typename T, typename... Args>
        Ret solve(T&& a, Args&&... args) {
            con << a;
            return solve(args...);
        }
    };

}    // namespace dbg_ns

#endif    // ifndef open_dbg_func